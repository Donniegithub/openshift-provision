---

- name: Create EC2 key pair
  ec2_key:
    name: "{{ ec2_key_name }}"
    region: "{{ aws_region }}"
    force: no
    state: present
  register: ec2_key

- name: Create keys directory
  file:
    path: "{{ keys_dir }}"
    state: directory
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: 0700
  become: yes

- name: Output EC2 private key
  copy:
    dest: "{{ ec2_key_file }}"
    content: "{{ ec2_key.key.private_key }}"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: 0600
  when: ec2_key.changed

- name: Set permissions for EC2 private key
  file:
    path: "{{ ec2_key_file }}"
    state: file
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: 0600
  become: yes

- name: Create CloudFormation stack
  cloudformation:
    stack_name: "{{ openshift_public_hostname | replace('.', '-') }}"
    region: "{{ aws_region }}"
    state: present
    template: "{{ role_path }}/files/greenfield.{{ cluster_type }}.yml"
    template_parameters:
      ClusterName: "{{ cluster_name }}"
      BaseDomain: "{{ openshift_base_domain }}"
      Route53HostedZoneId: "{{ route53_hosted_zone_id }}"
      Region: "{{ aws_region }}"
      KeyName: "{{ ec2_key_name }}"
      AmiId: "{{ ec2_ami_ids[aws_region][ec2_ami_type] }}"
      BastionNodeUserData: "{{ lookup('file', 'user_data/bastion.yml') | b64encode }}"
      MasterNodeUserData: "{{ lookup('file', 'user_data/master.yml') | b64encode }}"
      InfraNodeUserData: "{{ lookup('file', 'user_data/infra.yml') | b64encode }}"
      AppNodeUserData: "{{ lookup('file', 'user_data/app.yml') | b64encode }}"
      BastionNodeInstanceType: "{{ ec2_instance_type_bastion }}"
      MasterNodeInstanceType: "{{ ec2_instance_type_master }}"
      InfraNodeInstanceType: "{{ ec2_instance_type_infra }}"
      AppNodeInstanceType: "{{ ec2_instance_type_app }}"

- name: Refresh inventory to update EC2 instances information
  meta: refresh_inventory
